{"version":3,"sources":["components/LeafletMaps.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Errorboundry.js","containers/App.js","index.js"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","LeafletMap","position","name","Map","center","zoom","TileLayer","url","attribution","Marker","Popup","Card","email","id","latitude","longitude","Number","className","alt","src","CardList","robots","cardComponent","map","user","i","key","address","geo","lat","lng","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAOOA,IAAEC,KAAKC,QAAQC,UAAUC,YAEhCJ,IAAEC,KAAKC,QAAQG,aAAa,CACxBC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,MAGvB,IAgBeG,EAhBI,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,KAC3B,OACI,kBAACC,EAAA,EAAD,CAAKC,OAAQH,EAAUI,KAAM,GACjB,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEhB,kBAACC,EAAA,EAAD,CAAQR,SAAUA,GACd,kBAACS,EAAA,EAAD,KACKR,MCJdS,EAhBF,SAAC,GAA8C,IAA5CT,EAA2C,EAA3CA,KAAMU,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACjCd,EAAW,CAACe,OAAOF,GAAWE,OAAOD,IAC3C,OACI,yBAAKE,UAAU,mDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BN,EAA1B,mBACpB,6BACI,4CAAcX,IACd,6CAAeU,KAEnB,6BACI,kBAAC,EAAD,CAAYX,SAAUA,EAAUC,KAAMA,OCSvCkB,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACA,kBAAC,EAAD,CACIC,IAAKL,EAAOI,GAAGZ,GACfA,GAAIQ,EAAOI,GAAGZ,GACdX,KAAMmB,EAAOI,GAAGvB,KAChBU,MAAOS,EAAOI,GAAGb,MACjBE,SAAUO,EAAOI,GAAGE,QAAQC,IAAIC,IAChCd,UAAWM,EAAOI,GAAGE,QAAQC,IAAIE,SAIzC,OACI,6BACKR,ICHES,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKf,UAAU,OACX,2BACIA,UAAU,uCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,G,MARA,SAACC,GACZ,OACA,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,QAASC,OAAQ,oBACvDJ,EAAMK,YCkBAC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,gBACKO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,uCAEJG,KAAKX,MAAMK,a,GAhBCQ,aC6CZC,E,kDAxCX,aAAe,IAAD,8BACV,gBAcJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd1C,EAAKZ,MAAQ,CACTvB,OAAQ,GACRiC,YAAa,IAJP,E,gEASM,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAE5B,OAAQwC,S,+BAOjC,IAAD,EAC2Bb,KAAKJ,MAA7BvB,EADH,EACGA,OAAQiC,EADX,EACWA,YACVQ,EAAiBzC,EAAO0C,QAAO,SAAAC,GACjC,OAAOA,EAAM9D,KAAK+D,cAAcC,SAASZ,EAAYW,kBAEzD,OAAQ5C,EAAO8C,OAGX,yBAAKlD,UAAU,MACX,wBAAIA,UAAU,MAAd,qBACA,kBAAC,EAAD,CAAWe,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU/B,OAAQyC,OAP9B,2C,GA1BMZ,a,YCAlBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.697aabf7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css'; //important to add the css otherwise the map not render so good!!\r\n//import { Icon } from \"leaflet\";\r\nimport L from 'leaflet';\r\n\r\n//on fait ca pour avoir le icon sur la carte sinon il est invisible donc ondesactive parametre par defaut\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n//on importe manuellement limage du marker la solution ici => https://github.com/PaulLeCam/react-leaflet/issues/453\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n});\r\n\r\nconst LeafletMap = ({position, name}) => {\r\n    return (\r\n        <Map center={position} zoom={2}>\r\n                    <TileLayer\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    />\r\n                    <Marker position={position}>\r\n                        <Popup>\r\n                            {name}\r\n                        </Popup>\r\n                    </Marker>\r\n                </Map>\r\n        )\r\n}\r\n\r\nexport default LeafletMap;","import React from 'react';\r\nimport './Card.css';\r\nimport LeafletMap from './LeafletMaps';\r\n\r\nconst Card = ({ name, email, id, latitude, longitude }) => { \r\n    const position = [Number(latitude), Number(longitude)]\r\n    return (\r\n        <div className='tc bg-light-red br3 fl w-50 pa2 ba b--white bw2'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?size=150x150`}/>\r\n            <div>\r\n                <h2>{`Name: ${name}`}</h2>\r\n                <h4>{`Email: ${email}`}</h4>\r\n            </div>\r\n            <div>\r\n                <LeafletMap position={position} name={name}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => { \r\n    const cardComponent = robots.map((user, i) => {\r\n        return (\r\n        <Card \r\n            key={robots[i].id} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}\r\n            latitude={robots[i].address.geo.lat}\r\n            longitude={robots[i].address.geo.lng}\r\n            />\r\n        );\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue br4'\r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n    <div style={{ overflowY: 'scroll', height: '500px', border: '5px solid black' }}>\r\n        {props.children}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n//we create this to deal with error \r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super()\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/Errorboundry';\r\n\r\nclass App extends Component { //we create class in order to use state\r\n    constructor() {\r\n        super()\r\n        this.state = { //when we have a state we call that smart component\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    //lifecycle\r\n    componentDidMount(){ //\r\n        fetch('https://jsonplaceholder.typicode.com/users')//we bring data from a server on the internet\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots: users }))\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({ searchfield: event.target.value }) //anytime you want to change state and update it use setState\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return !robots.length ? //ternary operation a la place de if else\r\n            <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robot Map friends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} /> \r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}